import { Schema, TypeOf, date, object, string } from "zod";

const toDateObject = (value: string): Date => {
  // Convert the string date to a Date object
  return new Date(value);
};

export const createUserSchema= object({
    body:object({
        email: string({
            required_error: 'Email address is required',
          }).email('Invalid email address'),
          password: string({
            required_error: 'Password is required',
          })
            .min(8, 'Password must be more than 8 characters')
            .max(32, 'Password must be less than 32 characters'),

    })
});


      //dateOfBirth: string().transform(toDateObject), // Example minimum date
      
      export const userProfileSchema = object({
        body:object({
        id: string().optional(), // As id is generated by the database, it's optional in the schema
        image: string({
          required_error: 'Image is required',
        }), 
        fullName: string({ required_error: 'Full name is required' }),
        nickname: string({ required_error: 'Nickname is required' }),
        dateOfBirth:  string().transform(toDateObject).optional(), 
        email: string({ required_error: 'Email address is required' }).email('Invalid email address'),
        mobileNumber: string({ required_error: 'Mobile number is required' }),
        gender: string({ required_error: 'Gender is required' }),
      })
    });

    
export const loginUserSchema = object({
  body: object({
    email: string({
      required_error: 'Email address is required',
    }).email('Invalid email address'),
    password: string({
      required_error: 'Password is required',
    }).min(8, 'Invalid email or password'),
  }),
});

  export type CreateUserInput = TypeOf<typeof createUserSchema>['body'];
  export type UserProfileSchema = TypeOf<typeof userProfileSchema>['body'];
  export type LoginUserInput = TypeOf<typeof loginUserSchema>['body'];